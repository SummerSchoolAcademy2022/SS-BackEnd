{
  "openapi": "3.0.3",
  "info": {
    "title": "API Documentation",
    "description": "API Documentation",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html0"
    },
    "version": "1.0.11"
  },
  "tags": [
    {
      "name": "documentation",
      "description": "Documentation"
    }
  ],
  "paths": {
    "/products": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new product to the store",
        "description": "Add a new product to the store",
        "operationId": "addProduct",
        "requestBody": {
          "description": "Create a new product in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "product"
        ],
        "summary": "List all existing products",
        "description": "Returns all the products in the database. Pagination may be a useful tool.",
        "operationId": "getProducts",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The current page you want to see"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return on the current page"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by ID",
        "description": "Returns a single product (if it exists in database)",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "patch": {
        "tags": [
          "product"
        ],
        "summary": "Update an existing product",
        "description": "Update an existing product by Id",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent product in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID product"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/{productId}/retrieveImage": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "retrieve an image",
        "description": "description of an image",
        "operationId": "retrieveImage",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Add a new category to the store",
        "description": "Add a new category to the store",
        "operationId": "addCategory",
        "requestBody": {
          "description": "Create a new category in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": [
          "category"
        ],
        "summary": "List all existing categories",
        "description": "Returns all the categories in the database",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Find category by ID",
        "description": "Returns a single category",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "patch": {
        "tags": [
          "category"
        ],
        "summary": "Update an existing category",
        "description": "Update an existing category by Id",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent category in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID category"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/rating": {
      "post": {
        "tags": [
          "rate"
        ],
        "summary": "Add a new rating to a product",
        "description": "Add a new rating to a product",
        "operationId": "addRating",
        "requestBody": {
          "description": "Create a new rating for a product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/ratings/{productId}": {
      "patch": {
        "tags": [
          "rate"
        ],
        "summary": "Update an existing rating",
        "description": "Update an existing rating by produs Id",
        "operationId": "updateRating",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent rating in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Rate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid product ID"
          },
          "404": {
            "description": "Rating not found"
          }
        }
      }
    },
    "/rates/{productId}": {
      "get": {
        "tags": [
          "rate"
        ],
        "summary": "List ratings by product ID",
        "description": "Returns all ratings for an existing product from the database",
        "operationId": "getRatingByProductId",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              }
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/baskets": {
      "post": {
        "tags": [
          "basket"
        ],
        "summary": "Create a new basket",
        "description": "Create a new basket in the database",
        "operationId": "addBasket",
        "requestBody": {
          "description": "Create a new basket",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Basket"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Basket"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/baskets/{basketId}": {
      "patch": {
        "tags": [
          "basket"
        ],
        "summary": "Update an existing basket",
        "description": "Update an existing basket by Id",
        "operationId": "updateBasket",
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent basket",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Basket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Basket"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Basket"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID basket"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      }
    },
    "/basketProduct/{basketId}": {
      "get": {
        "tags": [
          "basketProduct"
        ],
        "summary": "List all existing products in specific basket",
        "description": "Returns all existing products in specific basket",
        "operationId": "getProductsByBasketId",
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasketProduct"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BasketProduct"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProductType": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "ICE_CREAM",
            "GELATO",
            "DONUTS",
            "MERCHANDISE"
          ]
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1223
          },
          "name": {
            "type": "string",
            "example": "Chocolate"
          },
          "description": {
            "type": "string",
            "example": "Short description of a specific type of ice cream"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1223
          },
          "title": {
            "type": "string",
            "example": "Dark Divine Chocolate"
          },
          "shortDescription": {
            "type": "string",
            "example": "Treat yourself to ice cream infused with smooth Bourbon sprinkled"
          },
          "longDescription": {
            "type": "string",
            "example": "Indulge in a rich and smooth low-calorie chocolate low-fat ice cream that comes with brownie crumbles and a caramel swirl with no artificial sweetener. Just Drooooolllll! Chocolate lover's real delight."
          },
          "ingredients": {
            "type": "string",
            "example": "Water, Chocolate Flavoured Confectionery (12%)( Water, Sugar, Milk Solids, Palm Oil, Cocoa Solids , Liquid Glucose, Maltodextrin, Emulsifier - E471, Stabilisers - E412, E410 And Contains Added Artificial Vanilla Flavouring Substance) Sugar, Palm Oil"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "example": 1
          },
          "allergens": {
            "type": "string",
            "example": "gluten"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 10.5
          },
          "currency": {
            "type": "string",
            "example": "euro"
          },
          "photoUrl": {
            "type": "string",
            "example": "https://www.google.com/search?q=inghetata&source=lnms&tbm=isch&sa=X&ved=2ahUKEwj60vTuib35AhU7_rsIHfeuBJEQ_AUoAXoECAUQAw&biw=1536&bih=722&dpr=1.25#imgrc=0e8LkqrWVQYkrM"
          },
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductType"
            }
          },
          "category": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "basketProduct": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasketProduct"
            }
          },
          "rate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rate"
            }
          }
        },
        "xml": {
          "name": "Product"
        }
      },
      "Rate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1223
          },
          "rate": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "example": 2
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "xml": {
          "name": "Rate"
        }
      },
      "BasketProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1223
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 14.24
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "example": 3
          },
          "product": {
            "type": "object",
            "xml": {
              "name": "type",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "basket": {
            "type": "object",
            "xml": {
              "name": "type",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Basket"
            }
          }
        },
        "xml": {
          "name": "BasketProduct"
        }
      },
      "Basket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1223
          },
          "sessionId": {
            "type": "string",
            "example": 1000
          },
          "basketProduct": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasketProduct"
            }
          }
        },
        "xml": {
          "name": "Basket"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    }
  }
}